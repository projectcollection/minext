import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { getData } from "./airtableAPI";

export type _Class = {
  id: string;
  name: string;
  students: string[];
};

export type Student = {
  id: string;
  name: string;
  classes: string[];
};

export interface AppState {
  name: string;
  authed: boolean;
  status: "idle" | "loading" | "failed";
  user: Student;
  students: Student[];
  classes: _Class[];
}

const initialState: AppState = {
  name: "",
  authed: false,
  status: "idle",
  user: { id: "", name: "", classes: [] },
  students: [],
  classes: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const login = createAsyncThunk("app/login", async (name: string) => {
  //fetch 1
  const user_res: any[] = await getData("Students", [name], true);
  const user: Student = {
    ...user_res[0],
    classes: user_res[0].data,
  };

  //fetch 2
  const classes_res: any[] = await getData("Classes", user.classes);
  const classes: _Class[] = classes_res.map((_class) => {
    return { ..._class, students: _class.data };
  });

  let student_ids: Set<string> = new Set();
  classes.forEach((_class) => {
    _class.students.forEach((id) => student_ids.add(id));
  });

  //fetch 3
  const students_res: any[] = await getData("Students", [...student_ids]);
  const students: Student[] = students_res.map((student) => {
    return { ...student, classes: student.data };
  });

  return { user, classes, students };
});

export const appSlice = createSlice({
  name: "app",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setName: (state, action: PayloadAction<string>) => {
      state.name = action.payload;
    },
    logout: (state) => {
      state.authed = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = "loading";
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = "idle";
        state.name = "";
        state.authed = true;
        state.user = action.payload.user;
        state.students = action.payload.students;
        state.classes = action.payload.classes;
      })
      .addCase(login.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { setName, logout } = appSlice.actions;

export const selectName = (state: RootState) => state.app.name;
export const selectAuthed = (state: RootState) => state.app.authed;
export const selectUser = (state: RootState) => state.app.user;
export const selectStudents = (state: RootState) => state.app.students;
export const selectClasses = (state: RootState) => state.app.classes;

export default appSlice.reducer;
